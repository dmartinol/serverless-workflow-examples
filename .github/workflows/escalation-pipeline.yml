---
  name: Escalation CI pipeline
  
  on:
    workflow_dispatch:
    push:
      paths:
        - escalation-eda/*
    release:
      types: [prereleased]
  env:
    ESCALATION_SWF_PATH: "escalation-eda/escalation-swf"
    MVN_OPTS: ""
  jobs:    
    build_and_deploy_java_apps:
      runs-on: ubuntu-latest
      name: Build and deploy container images for the Java applications
      env:
        JIRA_LISTENER_PATH: "escalation-eda/jira-listener"
        ESCALATION_SWF_IMAGE_NAME: "escalation-swf"
        JIRA_LISTENER_IMAGE_NAME: "jira-listener"
        IMAGE_REGISTRY: "quay.io"
        IMAGE_GROUP: "orchestrator"
      outputs:
        JiraListenerImageFull: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_GROUP }}/${{ env.JIRA_LISTENER_IMAGE_NAME }}:${{ env.JIRA_LISTENER_VERSION }}
        EscalationSwfImageFull: ${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_GROUP }}/${{ env.ESCALATION_SWF_IMAGE_NAME }}:${{ env.ESCALATION_SWF_VERSION }}
      steps:
        - uses: actions/checkout@v3

        - name: Set env
          run: |
            echo "ESCALATION_SWF_VERSION=$(mvn ${MVN_OPTS} help:evaluate -Dexpression=project.version -q -DforceStdout -f ${ESCALATION_SWF_PATH}/pom.xml)" >> "$GITHUB_ENV"
            echo "JIRA_LISTENER_VERSION=$(mvn ${MVN_OPTS} help:evaluate -Dexpression=project.version -q -DforceStdout -f ${JIRA_LISTENER_PATH}/pom.xml)" >> "$GITHUB_ENV"

        - name: Build Java projects
          run: |
            mvn ${MVN_OPTS} -B clean package --file escalation-eda/pom.xml -DskipTests
        # TODO: enable tests once fixed

        - name: "Build image ${ESCALATION_SWF_IMAGE_NAME} version ${ESCALATION_SWF_VERSION}"
          run: |
            mvn ${MVN_OPTS} clean install -Pknative -DskipTests \
              -Dquarkus.container-image.registry=${IMAGE_REGISTRY} \
              -Dquarkus.container-image.group=${IMAGE_GROUP} \
              -Dquarkus.container-image.name=${ESCALATION_SWF_IMAGE_NAME} \
              -Dquarkus.container-image.tag=${ESCALATION_SWF_VERSION} \
              --file ${ESCALATION_SWF_PATH}/pom.xml
      
        - name: "Build image ${JIRA_LISTENER_IMAGE_NAME} version ${JIRA_LISTENER_VERSION}"
          run: |
            docker build -f ${JIRA_LISTENER_PATH}/src/main/docker/Dockerfile.jvm \
              -t ${IMAGE_REGISTRY}/${IMAGE_GROUP}/${JIRA_LISTENER_IMAGE_NAME}:${JIRA_LISTENER_VERSION} ${JIRA_LISTENER_PATH}
            
        - name: "Login to ${IMAGE_REGISTRY}"
          run: |
            docker login -u="${{ secrets.REGISTRY_USERNAME }}" -p="${{ secrets.REGISTRY_PASSWORD }}" ${IMAGE_REGISTRY}

        - name: "Push ${ESCALATION_SWF_IMAGE_NAME} to ${IMAGE_REGISTRY}}/${IMAGE_GROUP}:${ESCALATION_SWF_VERSION}"
          run: |
            docker push ${IMAGE_REGISTRY}/${IMAGE_GROUP}/${ESCALATION_SWF_IMAGE_NAME}:${ESCALATION_SWF_VERSION}
        
        - name: "Push ${JIRA_LISTENER_IMAGE_NAME} to ${IMAGE_REGISTRY}}/${IMAGE_GROUP}:${JIRA_LISTENER_VERSION}"
          run: |
            docker push ${IMAGE_REGISTRY}/${IMAGE_GROUP}/${JIRA_LISTENER_IMAGE_NAME}:${JIRA_LISTENER_VERSION}

    build_and_deploy_chart:
      runs-on: ubuntu-latest
      name: Build and deploy the new chart on the GH pages repository
      needs: build_and_deploy_java_apps
      env:
        HELM_REPO_URL: "https://dmartinol.github.io/serverless-workflow-examples"
        ESCALATION_CHART_PATH: "escalation-eda/helm/escalation-eda"
        # TODO: one of latest/release
        CHART_REPO: "latest"
        JIRA_LISTENER_IMAGE_FULL: ${{ needs.build_and_deploy_java_apps.outputs.JiraListenerImageFull }}
        ESCALATION_SWF_IMAGE_FULL: ${{ needs.build_and_deploy_java_apps.outputs.EscalationSwfImageFull }}
      steps:
        - uses: actions/checkout@v3

        - name: Configure Git
          run: |
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"

        - name: Set up JDK 17
          uses: actions/setup-java@v3
          with:
            java-version: '17'
            distribution: 'temurin'
            cache: maven
      
        - name: Set env
          run: |
            echo "ESCALATION_CHART=${ESCALATION_CHART_PATH}/Chart.yaml" >> "$GITHUB_ENV"
            echo "ESCALATION_VALUES=${ESCALATION_CHART_PATH}/values.yaml" >> "$GITHUB_ENV"
            echo "ESCALATION_CHART_VERSION=$(mvn ${MVN_OPTS} help:evaluate -Dexpression=project.version -q -DforceStdout -f ${ESCALATION_SWF_PATH}/pom.xml | sed 's/-SNAPSHOT//g')" >> "$GITHUB_ENV"
            echo "CURRENT_CHART_REPO=charts/${CHART_REPO}" >> "$GITHUB_ENV"
            echo "CHART_NAME=$(cat ${ESCALATION_CHART} | grep 'name:' | cut -c 7-)" >> "$GITHUB_ENV"

        - name: Update chart version
          run: |
            yq -e -i '.version = "${{ env.ESCALATION_CHART_VERSION }}"' ${ESCALATION_CHART}
            yq -e -i '.appVersion = "${{ env.ESCALATION_CHART_VERSION }}"' ${ESCALATION_CHART}
      
        - name: Update default values
          run: |
            yq -e -i '.jiralistener.image = "${{ env.JIRA_LISTENER_IMAGE_FULL }}"' ${ESCALATION_VALUES}
  
        - name: Setup Helm
          uses: azure/setup-helm@v3

        - name: Load resources
          run: |
            cd ${ESCALATION_CHART_PATH}
            ./prepare.sh

        - name: Lint chart
          run: helm lint ${ESCALATION_CHART_PATH}
        
        - name: Validate chart
          run: |
            helm template test ${ESCALATION_CHART_PATH} > test.yaml
            # Count by resource type
            test $(grep -c "kind: ConfigMap" test.yaml) -eq 4
            test $(grep -c "kind: Secret" test.yaml) -eq 1
            test $(grep -c "kind: SonataFlow" test.yaml) -eq 1
            test $(grep -c "kind: SonataFlow" test.yaml) -eq 1
            # Verify resources
            cat test.yaml| yq  '. | select(.kind == "ConfigMap" and .metadata.name == "escalation-specs")' | grep -q "jira.yaml" 
            cat test.yaml| yq  '. | select(.kind == "ConfigMap" and .metadata.name == "escalation-specs")' | grep -q "kube.yaml" 
            cat test.yaml| yq  '. | select(.kind == "ConfigMap" and .metadata.name == "escalation-specs")' | grep -q "mailtrap.yaml" 
            cat test.yaml| yq  '. | select(.kind == "ConfigMap" and .metadata.name == "escalation-specs")' | grep -q "subflow-input-schema.json" 
            cat test.yaml| yq  '. | select(.kind == "ConfigMap" and .metadata.name == "escalation-specs")' | grep -q "ticket-escalation-schema.json" 
            cat test.yaml| yq  '. | select(.kind == "ConfigMap" and .metadata.name == "escalation-subflow")' | grep -q "ticketing-service.sw.yaml" 
            cat test.yaml| yq  '. | select(.kind == "SonataFlow").spec.flow.id' | grep -q "ticketEscalation" 

        - name: Package chart $CHART_NAME
          run: helm package ${ESCALATION_CHART_PATH}
  
        - name: Push changes to ${{ github.ref_name }}
          run: |
            git add ${ESCALATION_CHART_PATH}
            if ! git diff-index --quiet HEAD; then
              git commit -m "build: bumped ${CHART_NAME} to ${ESCALATION_CHART_VERSION}"
              git push
            fi
  
        - name: Checkout GH pages
          run: |
            git fetch
            git checkout gh_pages

        - name: Prepare repository ${CURRENT_CHART_REPO}
          run: |
            mkdir -p ${CURRENT_CHART_REPO}
            mv *.tgz ${CURRENT_CHART_REPO}

        - name: Update repository index
          run: |
            helm repo index --url ${HELM_REPO_URL}/${CURRENT_CHART_REPO} ${CURRENT_CHART_REPO}

        - name: Deploy new chart ${CHART_NAME} version ${ESCALATION_CHART_VERSION} on repo ${CURRENT_CHART_REPO}
          run: |
            git add ${CURRENT_CHART_REPO}
            git commit -m "chore: deployed chart ${CHART_NAME} version ${ESCALATION_CHART_VERSION} on repo ${CURRENT_CHART_REPO}"
            git push
    update_config_repo:
      runs-on: ubuntu-latest
      name: Update the config repository
      needs: 
        - build_and_deploy_java_apps
        - build_and_deploy_chart
      env:
        # TODO manage auth
        CONFIG_REPO: "dmartinol/escalation-workflow-config"
        CONFIG_FILE: "user-values.yaml"
        # TODO: switch b/w dev and prod
        CONFIG_BRANCH: "dev"
        JIRA_LISTENER_IMAGE_FULL: ${{ needs.build_and_deploy_java_apps.outputs.JiraListenerImageFull }}
        ESCALATION_SWF_IMAGE_FULL: ${{ needs.build_and_deploy_java_apps.outputs.EscalationSwfImageFull }}
      steps:
        - uses: actions/checkout@v3
          with:
            repository: ${{ env.CONFIG_REPO }}
            ref: ${{ env.CONFIG_BRANCH }}
            token: ${{ secrets.CONFIG_TOKEN }}

        - name: Configure Git
          run: |
            git config user.name "${{ github.actor }}"
            git config user.email "${{ github.actor }}@users.noreply.github.com"
        
        - name: Update image(s)
          run: |
            yq -e -i '.jiralistener.image = "${{ env.JIRA_LISTENER_IMAGE_FULL }}"' ${CONFIG_FILE}

        - name: Push changes to ${CONFIG_BRANCH}
          run: |
            git add ${CONFIG_FILE}
            if ! git diff-index --quiet HEAD; then
              git commit -m "build: bumped new images as ${JIRA_LISTENER_IMAGE_FULL} and ${ESCALATION_SWF_IMAGE_FULL}"
              git push
            fi
