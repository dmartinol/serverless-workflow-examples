specVersion: "0.8"
id: ticketEscalation
name: Ticket escalation
annotations:
  - "workflow-type/infrastructure"
version: 0.0.1
timeouts:
  workflowExecTimeout:
    duration: PT24H
start: CreateTicket
dataInputSchema:
  failOnValidationErrors: true
  schema: specs/ticket-escalation-schema.json
errors:
  - name: timeoutError
    code: TimedOut
  - name: notAvailable
    code: '404'
functions:
  - name: createNotification
    operation: 'specs/notifications.yaml#createNotification'
  - name: sendEmail
    operation: 'specs/mailtrap.yaml#sendEmail'
  - name: createK8sNamespace
    operation: specs/kube.yaml#createCoreV1Namespace
  - name: logInfo
    type: custom
    operation: "sysout:INFO"
events:
 - name: approvalEvent
   # TODO add property
   source: ticket.listener 
   # TODO add property
   type: dev.parodos.escalation
states:
  - name: CreateTicket
    type: operation
    actions:
      # - subFlowRef: $SECRET.escalation_subflow_id
      - subFlowRef: ticketingService
        actionDataFilter:
          toStateData: .createResponse
    stateDataFilter:
      input: ". += { request: {type: \"create\", namespace: .namespace, parentId: $WORKFLOW.instanceId} }"
    transition: WaitForApprovalEvent
  - name: GetTicket
    type: operation
    actions:
      # - subFlowRef: $SECRET.escalation_subflow_id
      - subFlowRef: ticketingService
        actionDataFilter:
          toStateData: .getResponse
    stateDataFilter:
      input: ". += { request: { type: \"get\", ticketId: .createResponse.ticketId, ticket: .createResponse.ticket} }"
    transition: CheckTicketState
  - name: CheckTicketState
    type: switch
    dataConditions:
      - condition: (.getResponse.status == "Approved")
        transition:
          nextState: CreateK8sNamespace
    defaultCondition:
      transition: WaitForApprovalEvent
  - name: WaitForApprovalEvent
    type: callback
    action:
      functionRef:
        refName: logInfo
        arguments:
          message: "\"Waiting for approvalEvent: \\(.)\""
    eventRef: approvalEvent
    timeouts:
      eventTimeout: PT10S
      # This is not working for now, waiting for a fix to https://issues.redhat.com/browse/KOGITO-9811
      # eventTimeout: $SECRET.timeout_seconds
    onErrors:
      - errorRef: timeoutError
        transition: Escalate
    transition: CreateK8sNamespace
  - name: Escalate
    type: parallel
    branches:
      - name: printAction
        actions:
          - name: printAction
            functionRef:
              refName: logInfo
              arguments:
                message: "\"Invoking escalation: \\(.)\""
      - name: createNotification
        actions:
          - name: createNotification
            functionRef:
              refName: createNotification
              arguments:
                title: '"ATTN: Escalation for ticket - " + .createResponse.ticketId'
                message: '"Please manage escalation ticket <a href=\"" + .createResponse.browseUrl + "\">" + .createResponse.ticketId + "</a>"'
                origin: "Escalation Worflow"
                topic: "Escalation Workflow"
      - name: sendEmail
        actions:
          - name: sendEmail
            condition: .email != null and .email.manager != null
            functionRef:
              refName: sendEmail
              arguments:
                inbox_id: $SECRET.mailtrap_inbox_id | tonumber
                to:
                  - email: .email.manager
                    name: Escalation Manager
                from:
                  email: $SECRET.sender_email
                  name: Escalation service
                subject: " \"Escalation ticket \" + .createResponse.ticketId "
                html: '"Please manage escalation ticket <a href=\"" + .createResponse.browseUrl + "\">" + .createResponse.ticketId + "</a>"'
    onErrors:
      - errorRef: notAvailable
        transition: GetTicket
    transition: GetTicket
  - name: CreateK8sNamespace
    type: operation
    actions:
      - functionRef:
          refName: createK8sNamespace
          arguments:
            apiVersion: v1
            kind: Namespace
            metadata:
              name: .namespace
        actionDataFilter:
          toStateData: .createdNamespace
    stateDataFilter:
      output: "{createdNamespace: .createdNamespace}"
    end: true